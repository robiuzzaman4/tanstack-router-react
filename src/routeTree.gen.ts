/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as appOrdersIndexRouteImport } from './routes/(app)/orders/index'
import { Route as appCustomersIndexRouteImport } from './routes/(app)/customers/index'
import { Route as appOrdersOrderIdRouteImport } from './routes/(app)/orders/$orderId'
import { Route as appCustomersCustomerIdRouteImport } from './routes/(app)/customers/$customerId'

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const appOrdersIndexRoute = appOrdersIndexRouteImport.update({
  id: '/(app)/orders/',
  path: '/orders/',
  getParentRoute: () => rootRouteImport,
} as any)
const appCustomersIndexRoute = appCustomersIndexRouteImport.update({
  id: '/(app)/customers/',
  path: '/customers/',
  getParentRoute: () => rootRouteImport,
} as any)
const appOrdersOrderIdRoute = appOrdersOrderIdRouteImport.update({
  id: '/(app)/orders/$orderId',
  path: '/orders/$orderId',
  getParentRoute: () => rootRouteImport,
} as any)
const appCustomersCustomerIdRoute = appCustomersCustomerIdRouteImport.update({
  id: '/(app)/customers/$customerId',
  path: '/customers/$customerId',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/customers/$customerId': typeof appCustomersCustomerIdRoute
  '/orders/$orderId': typeof appOrdersOrderIdRoute
  '/customers': typeof appCustomersIndexRoute
  '/orders': typeof appOrdersIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/customers/$customerId': typeof appCustomersCustomerIdRoute
  '/orders/$orderId': typeof appOrdersOrderIdRoute
  '/customers': typeof appCustomersIndexRoute
  '/orders': typeof appOrdersIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/(app)/customers/$customerId': typeof appCustomersCustomerIdRoute
  '/(app)/orders/$orderId': typeof appOrdersOrderIdRoute
  '/(app)/customers/': typeof appCustomersIndexRoute
  '/(app)/orders/': typeof appOrdersIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/customers/$customerId'
    | '/orders/$orderId'
    | '/customers'
    | '/orders'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/customers/$customerId'
    | '/orders/$orderId'
    | '/customers'
    | '/orders'
  id:
    | '__root__'
    | '/'
    | '/(app)/customers/$customerId'
    | '/(app)/orders/$orderId'
    | '/(app)/customers/'
    | '/(app)/orders/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  appCustomersCustomerIdRoute: typeof appCustomersCustomerIdRoute
  appOrdersOrderIdRoute: typeof appOrdersOrderIdRoute
  appCustomersIndexRoute: typeof appCustomersIndexRoute
  appOrdersIndexRoute: typeof appOrdersIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(app)/orders/': {
      id: '/(app)/orders/'
      path: '/orders'
      fullPath: '/orders'
      preLoaderRoute: typeof appOrdersIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(app)/customers/': {
      id: '/(app)/customers/'
      path: '/customers'
      fullPath: '/customers'
      preLoaderRoute: typeof appCustomersIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(app)/orders/$orderId': {
      id: '/(app)/orders/$orderId'
      path: '/orders/$orderId'
      fullPath: '/orders/$orderId'
      preLoaderRoute: typeof appOrdersOrderIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(app)/customers/$customerId': {
      id: '/(app)/customers/$customerId'
      path: '/customers/$customerId'
      fullPath: '/customers/$customerId'
      preLoaderRoute: typeof appCustomersCustomerIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  appCustomersCustomerIdRoute: appCustomersCustomerIdRoute,
  appOrdersOrderIdRoute: appOrdersOrderIdRoute,
  appCustomersIndexRoute: appCustomersIndexRoute,
  appOrdersIndexRoute: appOrdersIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
